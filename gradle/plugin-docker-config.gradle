if (project.tasks.findByName("docker")) {
    if (!file("src/main/docker/Dockerfile").exists()) {
        // Disable docker task if the docker plugin exists and there is a Dockerfile
        tasks.docker.onlyIf { false }
    } else {
        // Define variables
        ext {
            defaultMavenRepoType = project.version.endsWith("-SNAPSHOT") ? "snapshots" : "releases"
            nexusDeployTarget = project.hasProperty("nexusDeployTarget") ? project.getProperty("nexusDeployTarget").toLowerCase() : defaultMavenRepoType

            switch (nexusDeployTarget) {
                case "none":
                    dockerRegistryPort = "8084"
                    break
                case "snapshots":
                    dockerRegistryPort = "8084"
                    break
                case "staging":
                    dockerRegistryPort = "8085"
                    break
                case "releases":
                    dockerRegistryPort = "8086"
                    break
                default:
                    throw new GradleException("\n*** Unknown nexusDeployTarget [$nexusDeployTarget] ***")
                    break
            }

            dockerImageName = "$nexusHost:$dockerRegistryPort/${jar.baseName}"
        }

        // Configure docker plugin
        docker {
            name "$dockerImageName"
            dockerfile project.file("src/main/docker/Dockerfile")
            buildArgs(["JAR_FILE": "${jar.archiveName}"])
            files jar.archivePath, "src/main/docker/docker-entrypoint.sh"
            pull true
            tags "${project.version}"

            tasks.docker.dependsOn bootJar
            tasks.docker.shouldRunAfter test, itest, ctest
            assemble.dependsOn tasks.docker
        }

        // Ensure the docker image is pushed to the docker registry whenever we publish
        tasks.publish.dependsOn dockerPush
    }
}