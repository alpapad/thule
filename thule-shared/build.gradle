buildscript {
    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
        classpath("uk.co.serin.gradle.scripts:serin-gradle-scripts:1.0.0-SNAPSHOT")
    }
}

// Plugins
plugins {
    id "com.github.ben-manes.versions" version "0.28.0"
    id "org.sonarqube" version "3.0" apply(false)
}
// Standard Serin gradle plugin config
apply from: buildscript.classLoader.getResource("uk/co/serin/gradle/scripts/plugin-versions-config.gradle")

subprojects {
    apply plugin: "jacoco"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "org.sonarqube"
    apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

    // Standard Serin gradle plugin config
    apply from: buildscript.classLoader.getResource("uk/co/serin/gradle/scripts/build-config.gradle")

    // Non-standard Serin gradle plugin config, if any

    // Dependencies
    dependencies {
        annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
        implementation platform("org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR5")
    }
}

project("thule-data") {
    description = "Thule Data"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api("org.springframework.data:spring-data-commons")

        compileOnly project(":thule-security")
        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-security")
        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-feign") {
    description = "Thule Feign"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api("org.springframework.cloud:spring-cloud-starter-openfeign")

        compileOnly("org.projectlombok:lombok")

        implementation project(":thule-security")
        implementation("org.springframework.cloud:spring-cloud-starter-loadbalancer")
        implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
        implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")

        testImplementation project(":thule-spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-web")
    }
}

project("thule-resource-server") {
    description = "Thule Resource Server"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api project(":thule-security")
        api("org.springframework.boot:spring-boot-starter-oauth2-resource-server")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-web")
    }
}

project("thule-security") {
    description = "Thule Security"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api("org.springframework.boot:spring-boot-starter-security")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-test") {
    description = "Thule Test"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api("org.springframework.boot:spring-boot-starter-test")

        compileOnly("org.projectlombok:lombok")

        implementation("com.fasterxml.jackson.core:jackson-databind")
        implementation("org.springframework.boot:spring-boot-actuator")
        implementation("org.springframework.retry:spring-retry")
        implementation("org.springframework:spring-web")
    }
}

project("thule-utils") {
    description = "Thule Utils"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        compileOnly("org.projectlombok:lombok")

        implementation("javax.validation:validation-api")
        implementation("net.logstash.logback:logstash-logback-encoder:6.4")
        implementation("org.aspectj:aspectjrt")
        // Required by logback if-condition statements in the logback xml configuration
        implementation("org.codehaus.janino:janino")
        implementation("org.slf4j:slf4j-api")

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter") {
    description = "Thule Spring Boot Starter"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api project(":thule-utils")
        api("org.springframework.boot:spring-boot-starter-aop")

        compileOnly("org.projectlombok:lombok")
        compileOnly("org.springframework:spring-webmvc")

        // Required by anything using JAXB when using java 9+
        implementation("org.glassfish.jaxb:jaxb-runtime")

        testImplementation project(":thule-spring-boot-starter-test")
        testImplementation("org.springframework:spring-webmvc")

        itestImplementation("org.springframework.boot:spring-boot-starter-web")
        itestImplementation("org.springframework.boot:spring-boot-starter-webflux")
    }
}

project("thule-spring-boot-starter-data") {
    description = "Thule Spring Boot Starter Data"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api project(":thule-data")
        api project(":thule-spring-boot-starter")

        compileOnly project(":thule-security")
        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-security")
        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-feign") {
    description = "Thule Spring Boot Starter Feign"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api project(":thule-feign")
        api project(":thule-spring-boot-starter")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-resource-server") {
    description = "Thule Spring Boot Starter Resource Server"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api project(":thule-resource-server")
        api project(":thule-spring-boot-starter")

        compileOnly("org.projectlombok:lombok")

        implementation("org.springframework.boot:spring-boot-starter-web")

        testImplementation project(":thule-spring-boot-starter-test")

        itestImplementation("org.springframework.boot:spring-boot-starter-webflux")
    }
}

project("thule-spring-boot-starter-test") {
    description = "Thule Spring Boot Starter Test"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

        api project(":thule-spring-boot-starter")
        api project(":thule-test")
        api("org.awaitility:awaitility")
    }
}
