buildscript {
    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
    }

    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
        classpath("uk.co.serin.gradle.scripts:serin-gradle-scripts:1.0.0-SNAPSHOT")
    }
}

// Plugins
plugins {
    id "com.github.ben-manes.versions" version "0.27.0"
    id "org.sonarqube" version "2.8" apply(false)
    id "org.springframework.boot" version "2.2.1.RELEASE" apply(false)
}

subprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "maven-publish"
    apply plugin: "org.sonarqube"
    apply plugin: "org.springframework.boot"
    apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

    // Standard Serin gradle plugin config
    apply from: buildscript.classLoader.getResource("uk/co/serin/gradle/scripts/build-config.gradle")

    // Non-standard Serin gradle plugin config
    bootJar.enabled = false // Don't need an "über-jar" but still want the rest of the spring boot plugin
    jar.enabled = true // Don't need an "über-jar" but still want the rest of the spring boot plugin

    // Dependencies
    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR4")
        }
    }
}

project("thule-data") {
    description = "Thule Data"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api("org.springframework.data:spring-data-commons")

        compileOnly project(":thule-security")
        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-security")
        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-security") {
    description = "Thule Security"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api("org.springframework.security:spring-security-core")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-security-oauth2") {
    description = "Thule Security Oauth2"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api project(":thule-security")
        api("org.springframework.cloud:spring-cloud-starter-oauth2")
        api("org.springframework.cloud:spring-cloud-starter-openfeign")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-web")
    }
}

project("thule-test") {
    description = "Thule Test"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        compileOnly("org.projectlombok:lombok")

        implementation("junit:junit")
        implementation("org.assertj:assertj-core")
        implementation("org.mockito:mockito-core")
        implementation("org.slf4j:slf4j-api")
        implementation("org.springframework.boot:spring-boot-actuator")
        implementation("org.springframework.retry:spring-retry")
        implementation("org.springframework:spring-test")
        implementation("org.springframework:spring-web")
    }
}

project("thule-utils") {
    description = "Thule Utils"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        compileOnly("org.projectlombok:lombok")

        implementation("javax.validation:validation-api")
        implementation("net.logstash.logback:logstash-logback-encoder:6.2")
        implementation("org.aspectj:aspectjrt")
        implementation("org.codehaus.janino:janino") // Required by logback if-condition statements in the logback xml configuration
        implementation("org.slf4j:slf4j-api")

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter") {
    description = "Thule Spring Boot Starter"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api project(":thule-utils")
        api("org.springframework.boot:spring-boot-starter")

        compileOnly("org.projectlombok:lombok")

        implementation("org.glassfish.jaxb:jaxb-runtime") // Required by anything using JAXB when using java 9+

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-data") {
    description = "Thule Spring Boot Starter Data"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api project(":thule-data")
        api project(":thule-spring-boot-starter")

        compileOnly project(":thule-security")
        compileOnly("org.projectlombok:lombok")

        testCompileOnly project(":thule-security")

        testImplementation project(":thule-security")
        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-security") {
    description = "Thule Spring Boot Starter Security"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api project(":thule-security")
        api project(":thule-spring-boot-starter")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-security-oauth2") {
    description = "Thule Spring Boot Starter Security Oauth2"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")

        api project(":thule-security-oauth2")
        api project(":thule-spring-boot-starter")

        compileOnly("org.projectlombok:lombok")

        testImplementation project(":thule-spring-boot-starter-test")
        testImplementation("org.springframework.boot:spring-boot-starter-web")

        itestImplementation("org.apache.httpcomponents:httpclient")
    }
}

project("thule-spring-boot-starter-test") {
    description = "Thule Spring Boot Starter Test"
    dependencies {
        api project(":thule-spring-boot-starter")
        api project(":thule-test")
        api("org.awaitility:awaitility:4.0.1")
        api("org.springframework.boot:spring-boot-starter-test")
    }
}
