buildscript {
    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
        mavenLocal()
    }

    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.21.0" // Let it apply by default so that the plugin consolidates at the root of the project
    id "org.sonarqube" version "2.7.1" apply(false)
    id "org.springframework.boot" version "2.1.6.RELEASE" apply(false)
}

subprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "org.sonarqube"
    apply plugin: "org.springframework.boot"
    apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

    // Standard Serin gradle plugin config
    apply from: "${rootDir}/../gradle/build-config.gradle"

    // Non-standard Serin gradle plugin config
    bootJar.enabled = false // Don't need an "über-jar" but still want the rest of the spring boot plugin
    jar.enabled = true // Don't need an "über-jar" but still want the rest of the spring boot plugin

    // Dependencies
    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR1")
        }
    }
}

project("thule-spring-boot-starter") {
    description = "Thule Spring Boot Starter Utils"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compile project(":thule-utils")

        compileOnly("org.springframework.data:spring-data-jpa")
        compileOnly("org.springframework.security:spring-security-core")

        testCompile project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-oauth2") {
    description = "Thule Spring Boot Starter Oauth2"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compile project(":thule-spring-boot-starter")
        compile("org.springframework.cloud:spring-cloud-starter-oauth2")

        testCompile project(":thule-spring-boot-starter-test")
    }
}

project("thule-spring-boot-starter-oauth2-test") {
    description = "Thule Spring Boot Starter Oauth2 Test"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compile project(":thule-spring-boot-starter")
        compile project(":thule-spring-boot-starter-test")
        compile("org.springframework.security:spring-security-test")
    }
}

project("thule-spring-boot-starter-test") {
    description = "Thule Spring Boot Starter Test"
    dependencies {
        compile project(":thule-spring-boot-starter")
        compile project(":thule-test")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.cloud:spring-cloud-contract-wiremock")
        compile("org.springframework.restdocs:spring-restdocs-mockmvc")
    }
}

project("thule-test") {
    description = "Thule Test"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compile project(":thule-utils")
        compile("org.awaitility:awaitility:3.1.6")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.retry:spring-retry")

        compileOnly("org.springframework.cloud:spring-cloud-starter-oauth2")

        testCompile("org.springframework.cloud:spring-cloud-starter-oauth2")
    }
}

project("thule-utils") {
    description = "Thule Utils"
    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compileOnly("org.springframework.boot:spring-boot-starter-data-jpa")
        compileOnly("org.springframework.cloud:spring-cloud-starter-oauth2")
        compileOnly("org.springframework.cloud:spring-cloud-starter-openfeign")

        compile("net.logstash.logback:logstash-logback-encoder:6.1")
        compile("org.codehaus.janino:janino") // Required by logback if-condition statements in the logback xml configuration
        compile("org.glassfish.jaxb:jaxb-runtime") // Required by anything using JAXB when using java 9+
        compile("org.hibernate:hibernate-core")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.boot:spring-boot-starter-validation")
        compile("org.springframework.boot:spring-boot-starter-web")

        testCompile("org.springframework.boot:spring-boot-starter-data-jpa")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.springframework.cloud:spring-cloud-starter-oauth2")
        testCompile("org.springframework.cloud:spring-cloud-starter-openfeign")

        itestCompile("com.h2database:h2")
        itestCompile("org.springframework.boot:spring-boot-starter-data-jpa")
    }
}