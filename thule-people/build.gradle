buildscript {
    ext["spring-security-oauth2-autoconfigure.version"] = "2.1.2.RELEASE" // The pom for org.springframework.cloud:spring-cloud-security-dependencies:2.1.0.RELEASE incorrectly specifies <spring-security-oauth2-autoconfigure.version>2.1.0.M4</spring-security-oauth2-autoconfigure.version>

    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
        mavenLocal()
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.20.0" // Let it apply by default so that the plugin consolidates at the root of the project, otherwise it often hangs when checking dependency versions
    id "com.palantir.docker" version "0.21.0" apply(false)
    id "org.sonarqube" version "2.7" apply(false)
    id "org.springframework.boot" version "2.1.3.RELEASE" apply(false)
}

project("thule-people-config") {
    description = "Thule People Config"

    // Plugins
    apply plugin: "java"
    apply plugin: "maven-publish"

    // Standard Thule gradle plugin config
    apply from: "${rootDir}/../gradle/build-config.gradle"

    // Non-standard Thule gradle plugin config
}

project("thule-people-service") {
    description = "Thule People Service"

    // Plugins
    apply plugin: "com.palantir.docker"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "org.sonarqube"
    apply plugin: "org.springframework.boot"
    apply plugin: "maven-publish"

    // Standard Thule gradle plugin config
    apply from: "${rootDir}/../gradle/build-config.gradle"

    // Non-standard Thule gradle plugin config
    itest {
        // Remove docker container once the integration tests have completed
        afterSuite { descriptor ->
            if (descriptor.getName().contains("Gradle Test Executor")) {
                exec {
                    commandLine "docker-compose", "-f", "thule-people-service/src/test/docker/thule-people-tests/docker-compose-mysql.yml", "down", "-v", "--remove-orphans"
                }
            }
        }
    }
    ctest {
        // Remove docker container once the contract tests have completed
        afterSuite { descriptor ->
            if (descriptor.getName().contains("Gradle Test Executor")) {
                exec {
                    commandLine "docker-compose", "-f", "thule-people-service/src/test/docker/thule-people-tests/docker-compose-mysql.yml", "down", "-v", "--remove-orphans"
                }
            }
        }
    }
    dtest {
        // Remove docker container once the docker tests have completed
        afterSuite { descriptor ->
            if (descriptor.getName().contains("Gradle Test Executor")) {
                exec {
                    commandLine "docker-compose", "-f", "thule-people-service/src/dtest/docker/thule-people-docker-tests/docker-compose.yml", "down", "-v", "--remove-orphans"
                }
            }
        }
    }
    sonarqube {
        properties {
            // SonarQube will fail due to duplicate code across micro-services, however, this is legal. So we will exclude cpd for those classes
            property "sonar.cpd.exclusions", "**/domain/**"
        }
    }

    // Dependencies
    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:Greenwich.RELEASE")
        }
    }

    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compile("uk.co.serin.thule:thule-spring-boot-starter:${thuleSharedVersion}")
        compile("uk.co.serin.thule:thule-spring-boot-starter-oauth2:${thuleSharedVersion}")
        compile("com.googlecode.log4jdbc:log4jdbc:1.2")
        compile("mysql:mysql-connector-java")
        compile("org.flywaydb:flyway-core")
        compile("org.jolokia:jolokia-core") // Required for JMX support when using the Admin server
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-data-rest")
        compile("org.springframework.boot:spring-boot-starter-validation")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.cloud:spring-cloud-starter-config")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-openfeign")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")
        compile("org.springframework.data:spring-data-rest-hal-browser")
        compile("org.springframework.retry:spring-retry") // Required to retry connecting to the configuration service when it is not available at startup

        testCompile("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")

        itestCompile project(":thule-people-config")
        itestCompile("uk.co.serin.thule:thule-spring-boot-starter-oauth2-test:${thuleSharedVersion}")
        itestCompile("com.h2database:h2")
        itestCompile("com.oracle:ojdbc8:18.3")
        itestCompile("org.hsqldb:hsqldb")

        ctestCompile project(":thule-people-config")
        ctestCompile("uk.co.serin.thule:thule-spring-boot-starter-oauth2-test:${thuleSharedVersion}")

        dtestCompile("uk.co.serin.thule:thule-spring-boot-starter:${thuleSharedVersion}")
        dtestCompile("uk.co.serin.thule:thule-spring-boot-starter-oauth2:${thuleSharedVersion}")
        dtestCompile("uk.co.serin.thule:thule-spring-boot-starter-oauth2-test:${thuleSharedVersion}")
        dtestCompile("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")
        dtestCompile("org.springframework.boot:spring-boot-starter-web")
        dtestCompile("org.springframework.cloud:spring-cloud-starter-oauth2")
    }
}