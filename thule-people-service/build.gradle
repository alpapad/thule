buildscript {
    ext["hibernate.version"] = "5.2.12.Final" // Override spring boot defined version 5.2.14.Final which contains a bug whereby Oracle integration tests fail with a AbstractMethodError

    repositories {
        maven { url "http://$nexusHost:$nexusPort/repository/maven-public" }
        mavenLocal()
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "com.palantir.docker" version "0.19.2"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "org.sonarqube" version "2.6.2"
    id "org.springframework.boot" version "2.0.1.RELEASE"
}
apply plugin: "io.spring.dependency-management"

// Standard Serin gradle plugin config
apply from: "${rootDir}/../gradle/build-config.gradle"

// Non-standard Serin gradle plugin config
sonarqube {
    properties {
        // SonarQube will fail due to duplicate code across micro-services, however, this is legal. So we will exclude cpd for those classes
        property "sonar.cpd.exclusions", "**/domain/**"
    }
}
itest {
    // Remove docker container once the integration tests have completed
    afterSuite { descriptor ->
        if (descriptor.getName().contains("Gradle Test Executor")) {
            exec {
                commandLine "docker-compose", "-f", "src/itest/docker/$project.name/docker-compose-mysql.yml", "rm", "-fsv"
            }
        }
    }
}
// Required for Java9
//    tasks.withType(Test) {
//        jvmArgs += ["--add-modules", "java.xml.bind"]
//    }

// Dependencies
dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:Finchley.M9")
    }
}

dependencies {
    compile("uk.co.serin.thule:thule-spring-boot-starter-utils:1.0.0-SNAPSHOT")
    compile("com.googlecode.log4jdbc:log4jdbc:1.2")
    compile("com.h2database:h2")
    compile("net.logstash.logback:logstash-logback-encoder:5.0")
    compile("org.jolokia:jolokia-core") // Required for JMX support when using the Admin server
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("org.springframework.boot:spring-boot-starter-data-rest")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework.boot:spring-boot-starter-security")
    compile("org.springframework.boot:spring-boot-starter-validation")
    compile("org.springframework.cloud:spring-cloud-starter-config")
    compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    compile("org.springframework.cloud:spring-cloud-starter-openfeign")
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    compile("org.springframework.cloud:spring-cloud-starter-zipkin")
    compile("org.springframework.data:spring-data-rest-hal-browser")
    // Required to retry connecting to the discovery server when it is not available at startup
    compile("org.springframework.retry:spring-retry")

    testCompile("uk.co.serin.thule:thule-spring-boot-starter-test:1.0.0-SNAPSHOT")

    itestCompile("com.oracle:ojdbc6:11.2.0.1.0")
    itestCompile("mysql:mysql-connector-java")
    itestCompile("org.flywaydb:flyway-core")
    itestCompile("org.hsqldb:hsqldb")
}