buildscript {
    ext["mockito.version"] = "3.1.0" // Spring boot 2.1 uses mockito version 2.23.4 which does not fully support java 11+

    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
    }

    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
        classpath("uk.co.serin.gradle.scripts:serin-gradle-scripts:1.0.0-SNAPSHOT")
    }
}

// Plugins
plugins {
    id "com.github.ben-manes.versions" version "0.27.0"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "org.asciidoctor.convert" version "1.6.0"
    id "org.sonarqube" version "2.8"
    id "org.springframework.boot" version "2.1.10.RELEASE"
}
apply plugin: "io.spring.dependency-management"
apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

// Standard Serin gradle plugin config
apply from: buildscript.classLoader.getResource("uk/co/serin/gradle/scripts/build-config.gradle")

// Non-standard Serin gradle plugin config
ctest {
    // Remove docker container once the contract tests have completed
    afterSuite { descriptor ->
        if (descriptor.getName().contains("Gradle Test Executor")) {
            exec {
                commandLine "docker-compose", "-f", "src/test/docker/thule-people-service-tests/docker-compose-mysql.yml", "down", "-v", "--remove-orphans"
            }
        }
    }
}

description = "Thule People Service"

// Dependencies
dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR4")
    }
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")

    compileOnly("org.projectlombok:lombok")

    implementation("uk.co.serin.thule:thule-spring-boot-starter-data:${thuleSharedVersion}")
    implementation("uk.co.serin.thule:thule-spring-boot-starter-security:${thuleSharedVersion}")
    implementation("uk.co.serin.thule:thule-spring-boot-starter-security-oauth2:${thuleSharedVersion}")
    implementation("com.googlecode.log4jdbc:log4jdbc:1.2")
    implementation("mysql:mysql-connector-java")
    implementation("org.flywaydb:flyway-core")
    implementation("org.jolokia:jolokia-core") // Required for JMX support when using the Admin server
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-data-rest")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.cloud:spring-cloud-starter-config")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes-ribbon")
    implementation("org.springframework.cloud:spring-cloud-starter-openfeign")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("org.springframework.cloud:spring-cloud-starter-zipkin")
    implementation("org.springframework.data:spring-data-rest-hal-browser")
    implementation("org.springframework.retry:spring-retry") // Required to retry connecting to the configuration service when it is not available at startup

    testImplementation("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")

    itestImplementation("uk.co.serin.thule:thule-spring-boot-starter-security-test:${thuleSharedVersion}")
    itestImplementation("com.h2database:h2")
    itestImplementation("com.oracle:ojdbc8:18.3")
    itestImplementation("org.hsqldb:hsqldb")

    ctestImplementation("uk.co.serin.thule:thule-spring-boot-starter-security-test:${thuleSharedVersion}")

    dtestImplementation("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")
    dtestImplementation("org.springframework.boot:spring-boot-starter-actuator")
    dtestImplementation("org.springframework.boot:spring-boot-starter-web")
}
