buildscript {
    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
    }

    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
        classpath("uk.co.serin.gradle.scripts:serin-gradle-scripts:1.0.0-SNAPSHOT")
    }
}

// Plugins
plugins {
    id "com.github.ben-manes.versions" version "0.27.0"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "org.asciidoctor.convert" version "2.4.0"
    id "org.sonarqube" version "2.8"
}
apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

// Standard Serin gradle plugin config
apply from: buildscript.classLoader.getResource("uk/co/serin/gradle/scripts/build-config.gradle")

// Non-standard Serin gradle plugin config
itest {
    // Remove docker container once the contract tests have completed
    afterSuite { descriptor ->
        if (descriptor.getName().contains("Gradle Test Executor")) {
            exec {
                commandLine "docker-compose", "-f", "src/itest/docker/thule-authentication-service-tests/docker-compose.yml", "down", "-v", "--remove-orphans"
            }
        }
    }
}

description = "Thule Authentication Service"

// Dependencies
dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    compileOnly("org.projectlombok:lombok")

    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR2")

    itestImplementation("uk.co.serin.thule:thule-spring-boot-starter-feign:${thuleSharedVersion}")
    itestImplementation("uk.co.serin.thule:thule-spring-boot-starter-resource-server:${thuleSharedVersion}")
    itestImplementation("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")
    itestImplementation("org.springframework.boot:spring-boot-starter-webflux")
    itestImplementation("org.springframework.security:spring-security-oauth2-client")

    dtestImplementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    dtestImplementation("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")
    dtestImplementation("org.springframework.boot:spring-boot-starter-webflux")
}
