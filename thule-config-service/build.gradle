buildscript {
    repositories {
        maven { url "http://$nexusHost:$nexusPort/repository/maven-public" }
        mavenLocal()
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "com.palantir.docker" version "0.19.2"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "org.sonarqube" version "2.6.2"
    id "org.springframework.boot" version "2.0.1.RELEASE"
}
apply plugin: "io.spring.dependency-management"

// Standard Serin gradle plugin config
apply from: "${rootDir}/../gradle/build-config.gradle"

// Non-standard Serin gradle plugin config
def thuleMicroServicesConfig = "$buildDir/generated-resources/thule-micro-services"
// Add Spring boot config from each thule micro-service
sourceSets {
    main {
        // Register an output folder for thuleMicroServicesConfig, it will then be on the
        // 'main' classpath and will be added into the jar
        output.dir(thuleMicroServicesConfig, builtBy: "processResourcesFromMicroServices")
        // Add the thuleMicroServicesConfig as a resource source directory, not strictly required
        // for gradle but will enable the thuleMicroServicesConfig to be added to the classpath used by IntelliJ
        resources.srcDirs += thuleMicroServicesConfig
    }
}
// Collect Spring boot config from individual micro-services
task processResourcesFromMicroServices {
    doLast {
        copy {
            from "../thule-admin-server/src/main/resources/config"
            into thuleMicroServicesConfig + "/config/thule-admin-server"
        }
        copy {
            from "../thule-discovery-service/src/main/resources/config"
            into thuleMicroServicesConfig + "/config/thule-discovery-service"
        }
        copy {
            from "../thule-edge-server/src/main/resources/config"
            into thuleMicroServicesConfig + "/config/thule-edge-server"
        }
        copy {
            from "../thule-email-service/src/main/resources/config"
            into thuleMicroServicesConfig + "/config/thule-email-service"
        }
        copy {
            from "../thule-people-service/src/main/resources/config"
            into thuleMicroServicesConfig + "/config/thule-people-service"
        }
    }
}

// Dependencies
dependencyManagement {
    imports {
        mavenBom("org.springframework.cloud:spring-cloud-dependencies:FINCHLEY.RC1")
    }
}

dependencies {
    compile("uk.co.serin.thule:thule-spring-boot-starter-utils:1.0.0-SNAPSHOT")
    compile("org.jolokia:jolokia-core") // Required for JMX support when using the Admin server
    compile("org.springframework.boot:spring-boot-starter-actuator")
    compile("org.springframework.boot:spring-boot-starter-logging")
    compile("org.springframework.cloud:spring-cloud-config-server")
    compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
    compile("org.springframework.cloud:spring-cloud-starter-sleuth")
    compile("org.springframework.cloud:spring-cloud-starter-zipkin")

    // Required to retry connecting to the discovery server when it is not available at startup
    itestCompile("org.springframework.retry:spring-retry")

    testCompile("uk.co.serin.thule:thule-spring-boot-starter-test:1.0.0-SNAPSHOT")
}
