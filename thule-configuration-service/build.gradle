buildscript {
    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
    }

    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
        classpath("uk.co.serin.gradle.scripts:serin-gradle-scripts:1.0.0-SNAPSHOT")
    }
}

// Plugins
plugins {
    id "com.github.ben-manes.versions" version "0.27.0"
    id "jacoco"
    id "java"
    id "maven-publish"
    id "org.sonarqube" version "2.8"
    id "org.springframework.boot" version "${springBootVersion}"
}
apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

// Standard Serin gradle plugin config
apply from: buildscript.classLoader.getResource("uk/co/serin/gradle/scripts/build-config.gradle")

// Non-standard Serin gradle plugin config
configurations {
    config
}
dependencies {
    config("uk.co.serin.thule:thule-admin-service:latest.integration")
    config("uk.co.serin.thule:thule-discovery-service:latest.integration")
    config("uk.co.serin.thule:thule-email-service:latest.integration")
    config("uk.co.serin.thule:thule-gateway-service:latest.integration")
    config("uk.co.serin.thule:thule-people-service:latest.integration")
}
task collectConfigs {
    doLast {
        configurations.config.resolvedConfiguration.resolvedArtifacts.each { artifact ->
            copy {
                from zipTree(artifact.file)
                into "$buildDir/generated-resources/micro-services-config/config/" + artifact.moduleVersion.id.name
                include "/BOOT-INF/classes/config/**"
                eachFile { f ->
                    f.path = f.path.replaceFirst("BOOT-INF/classes/config", "")
                }
                includeEmptyDirs false
            }
        }
    }
}

description = "Thule Configuration Service"

// Dependencies
dependencies {
    annotationProcessor platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")

    compileOnly("org.projectlombok:lombok")

    implementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    implementation platform("org.springframework.cloud:spring-cloud-dependencies:Hoxton.SR1")
    implementation("uk.co.serin.thule:thule-spring-boot-starter:${thuleSharedVersion}")
    implementation("org.jolokia:jolokia-core") // Required for JMX support when using the Admin server
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.cloud:spring-cloud-config-server")
    implementation("org.springframework.cloud:spring-cloud-starter-kubernetes")
    implementation("org.springframework.cloud:spring-cloud-starter-sleuth")
    implementation("org.springframework.cloud:spring-cloud-starter-zipkin")

    testImplementation("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")

    dtestImplementation platform("org.springframework.boot:spring-boot-dependencies:${springBootVersion}")
    dtestImplementation("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")
    dtestImplementation("org.springframework.boot:spring-boot-starter-actuator")
    dtestImplementation("org.springframework.boot:spring-boot-starter-webflux")
}
