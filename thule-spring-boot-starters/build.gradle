buildscript {
    apply from: "${rootDir}/../gradle/repo-config.gradle", to: buildscript

    // Dependencies for non-core plugins
    // Note: These dependencies must reside in a buildscript block that is *not* within a script plugin
    // see https://github.com/gradle/gradle/issues/1894
    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT") {
            changing = true
        }
    }

    // Changing modules are cached by default for 24 hours, change the default to never and mark snapshots as changing (must be within the buildscript)
    configurations.all {
        resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.17.0"
    id "org.sonarqube" version "2.6.1"
    id "org.springframework.boot" version "2.0.0.M6" apply(false)
}
apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"
apply from: "${rootDir}/../gradle/plugin-sonarqube-config.gradle"

subprojects {
    apply plugin: "io.spring.dependency-management"
    apply plugin: "jacoco"
    apply plugin: "java"
    apply plugin: "maven-publish"
    apply plugin: "org.springframework.boot"

    // Standard Serin gradle plugin config
    apply from: "${rootDir}/../gradle/build-config.gradle"
    apply from: "${rootDir}/../gradle/plugin-jacoco-config.gradle"
    apply from: "${rootDir}/../gradle/plugin-maven-publish-config.gradle"
    apply from: "${rootDir}/../gradle/plugin-spring-boot-config.gradle"

    // Non-standard Serin gradle plugin config
    bootJar.enabled = false // Don't need an "über-jar" but still want the rest of the spring boot plugin
    jar.enabled = true // Don't need an "über-jar" but still want the rest of the spring boot plugin
}

project("thule-spring-boot-starter-test") {
    dependencies {
        compile project(":thule-test")
        compile("com.github.tomakehurst:wiremock:2.11.0")
        compile("nl.jqno.equalsverifier:equalsverifier:2.4")
        compile("org.awaitility:awaitility:3.0.0")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("pl.pojo:pojo-tester:0.7.6")
    }
}

project("thule-spring-boot-starter-utils") {
    dependencies {
        compile project(":thule-utils")

        testCompile project(":thule-spring-boot-starter-test")
    }
}

project("thule-test") {
    dependencies {
        compile("org.assertj:assertj-core")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-test")
        compile("org.springframework.boot:spring-boot-starter-web")
        compile("org.springframework.retry:spring-retry")

        testCompile("pl.pojo:pojo-tester:0.7.6")
    }
}

project("thule-utils") {
    dependencies {
        compile("org.codehaus.janino:janino:3.0.7") // Required by logback if-condition statements in the xml configuration
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-jetty")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.boot:spring-boot-starter-web") {
            exclude group: "org.springframework.boot", module: "spring-boot-starter-tomcat"
        }

        testCompile project(":thule-spring-boot-starter-test")
    }
}
