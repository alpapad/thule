buildscript {
    ext["mockito.version"] = "3.1.0" // Spring boot 2.1.6 uses mockito version 2.23.4 which does not fully support java 12

    repositories {
        maven { url "http://${nexusHost}:${nexusPort}/repository/maven-public" }
        mavenLocal()
    }

    dependencies {
        classpath("uk.co.serin.gradle.plugins:sonarqube-build-breaker-plugin:1.0.0-SNAPSHOT")
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.25.0"
    id "com.palantir.docker" version "0.22.1" apply(false)
    id "org.sonarqube" version "2.8" apply(false)
    id "org.springframework.boot" version "2.1.9.RELEASE" apply(false)
}

project("thule-configuration-config") {
    description = "Thule Configuration Config"

    // Plugins
    apply plugin: "java"
    apply plugin: "maven-publish"

    // Standard Thule gradle plugin config
    apply from: "${rootDir}/../gradle/build-config.gradle"

    // Non-standard Thule gradle plugin config
    // Task collectConfigs is defined purely for development usage. Set up intellij to
    // invoke this task so that when starting the configuration service it will have all the 
    // configs for all services
    configurations {
        config
    }
    dependencies {
        config("uk.co.serin.thule:thule-admin-config:latest.integration")
        config("uk.co.serin.thule:thule-discovery-config:latest.integration")
        config("uk.co.serin.thule:thule-email-config:latest.integration")
        config("uk.co.serin.thule:thule-gateway-config:latest.integration")
        config("uk.co.serin.thule:thule-people-config:latest.integration")
    }
    task collectConfigs {
        doLast {
            configurations.config.resolvedConfiguration.resolvedArtifacts.each { artifact ->
                copy {
                    from zipTree(artifact.file)
                    into "$buildDir/generated-resources/micro-services-config/config/" + artifact.moduleVersion.id.name.replaceFirst("config", "service")
                    include "config/**"
                    eachFile { f ->
                        f.path = f.path.replaceFirst("config", "")
                    }
                    includeEmptyDirs false
                }
            }
        }
    }
}

project("thule-configuration-service") {
    description = "Thule Configuration Service"

    // Plugins
    apply plugin: "com.palantir.docker"
    apply plugin: "io.spring.dependency-management"
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "org.sonarqube"
    apply plugin: "org.springframework.boot"
    apply plugin: "maven-publish"
    apply plugin: "uk.co.serin.gradle.plugins.sonarqube-build-breaker"

    // Standard Thule gradle plugin config
    apply from: "${rootDir}/../gradle/build-config.gradle"

    // Non-standard Thule gradle plugin config

    // Dependencies
    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-dependencies:Greenwich.SR3")
        }
    }

    dependencies {
        annotationProcessor("org.projectlombok:lombok")
        compileOnly("org.projectlombok:lombok")

        compile("uk.co.serin.thule:thule-spring-boot-starter:${thuleSharedVersion}")
        compile("org.jolokia:jolokia-core") // Required for JMX support when using the Admin server
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.cloud:spring-cloud-config-server")
        compile("org.springframework.cloud:spring-cloud-starter-netflix-eureka-client")
        compile("org.springframework.cloud:spring-cloud-starter-sleuth")
        compile("org.springframework.cloud:spring-cloud-starter-zipkin")

        testCompile("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")

        itestCompile project(":thule-configuration-config")

        ctestCompile project(":thule-configuration-config")

        dtestCompile("uk.co.serin.thule:thule-spring-boot-starter:${thuleSharedVersion}")
        dtestCompile("uk.co.serin.thule:thule-spring-boot-starter-test:${thuleSharedVersion}")
    }
}