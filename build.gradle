buildscript {
    // Override Spring boot versions
    ext["assertj.version"] = "3.5.2"  // Remove when spring boot has caught up with thje latest assertj version
    ext["flyway.version"] = "4.0.3"  // Remove when spring boot has caught up with thje latest flyway version
    ext["hibernate.version"] = "5.2.2.Final"  // Remove when spring boot has caught up with thje latest hibernate version
    ext["hsqldb.version"] = "2.3.4"  // Remove when spring boot has caught up with thje latest hsqldb version
    ext["mysql.version"] = "6.0.4"  // Remove when spring boot has caught up with thje latest mysql version

    ext {
        jacocoVersion = "0.7.7.201606060606"
        springBootVersion = "1.4.1.RELEASE"
        springCloudVersion = "Camden.RC1"
    }

    repositories {
        mavenLocal()
        maven {
            credentials {
                username = "${nexusUser}"
                password = "${nexusPassword}"

            }
            url "http://pooh:8081/repository/maven-public"
        }
        mavenCentral()
        maven {
            url "http://repo.spring.io/milestone"
        }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("se.transmode.gradle:gradle-docker:1.2")
    }
}

plugins {
    id "com.github.ben-manes.versions" version "0.13.0"
    id "org.sonarqube" version "2.0.1"
}

allprojects {
    apply plugin: "java"

    // Project metadata
    description = "Thule"
    group = "uk.co.serin.thule"
    version = projectVersion + "-" + buildNumber

    // Java plugin configuration
    compileJava.options.encoding = "UTF-8"
    compileJava.sourceCompatibility =  1.8
    compileJava.targetCompatibility = 1.8
    // Replace the version in spring config with the gradle build version
    processResources.filter { String line -> line.replace("@version@", version) }

    repositories {
        mavenLocal()
        maven {
            credentials {
                username = "${nexusUser}"
                password = "${nexusPassword}"

            }
            url "http://pooh:8081/repository/maven-public"
        }
        mavenCentral()
        maven {
            url "http://repo.spring.io/milestone"
        }
    }

    // Sonarqube plugin configuration
    sonarqube {
        properties {
            property "sonar.host.url", "http://pooh:9000"
            property "sonar.scm.disabled", "true"
            property "sonar.projectName", "Thule"
        }
    }
}

subprojects {
    apply from: "../coverage.gradle"
    apply plugin: "docker"
    apply plugin: "maven"
    apply plugin: "spring-boot"

    // Dependencies
    dependencyManagement {
        imports {
            mavenBom("org.springframework.cloud:spring-cloud-starter-parent:${springCloudVersion}")
            // Use latest spring boot version to override spring boot version specified in spring-cloud-starter-parent
            mavenBom("org.springframework.boot:spring-boot-starter-parent:${springBootVersion}")
        }
        dependencies {
            dependency("com.googlecode.log4jdbc:log4jdbc:1.2")
            dependency("com.oracle:ojdbc6:11.2.0.1.0")
            dependency("commons-lang:commons-lang:2.6")
            dependency("de.codecentric:spring-boot-admin-server:1.4.1")
            dependency("de.codecentric:spring-boot-admin-server-ui:1.4.1")
            dependency("nl.jqno.equalsverifier:equalsverifier:2.1.5")
            dependency("org.awaitility:awaitility:2.0.0")
            dependency("org.jolokia:jolokia-core:1.3.4")
            dependency("org.powermock:powermock-api-mockito:1.6.5")
            dependency("org.powermock:powermock-core:1.6.5")
            dependency("org.powermock:powermock-module-junit4:1.6.5")
            dependency("org.springframework.data:spring-data-rest-hal-browser:2.6.0.M1")
        }
    }

    // Docker plugin configuration
    task dockerBuild(type: Docker, dependsOn: assemble) {
        // dockerBuild options
        applicationName = jar.baseName
        dockerfile = file("src/main/docker/Dockerfile")
        push = false
        registry = "pooh.serin-consultancy.co.uk"
        tagVersion = "latest"

        // Add files to Docker context
        doFirst {
            copy { from jar into stageDir }
            copy { from "src/main/docker/docker-entrypoint.sh" into stageDir }
        }

        // Only enable if a Dockerfile exists
        enabled = file(projectDir.toString() + '/src/main/docker/Dockerfile').isFile()

        // Add to build lifecycle
        build.dependsOn dockerBuild
    }

    // Integration tests configuration
    configurations {
        itestCompile.extendsFrom testCompile
        itestRuntime.extendsFrom testRuntime
    }
    sourceSets {
        itest {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output

            java.srcDir file("src/itest/java")
            resources.srcDir file("src/itest/resources")
        }
    }
    task itest(type: Test, dependsOn: test) {
        testClassesDir = sourceSets.itest.output.classesDir
        classpath = sourceSets.itest.runtimeClasspath

        // Add to build lifecycle
        check.dependsOn itest
    }

    // Jacoco plugin configuration
    jacoco.toolVersion = "${jacocoVersion}"

    // Test configuration
    // Log test results summary
    tasks.withType(Test) {
        testLogging {
            // set options for log level LIFECYCLE
            events "passed", "skipped", "failed", "standardOut"
            showExceptions true
            exceptionFormat "short"
            showCauses true
            showStackTraces true

            // set options for log level DEBUG and INFO
            debug {
                events "started", "passed", "skipped", "failed", "standardOut", "standardError"
                exceptionFormat "full"
            }
            info.events = debug.events
            info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = "|  ", endItem = "  |"
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println("\n" + ("-" * repeatLength) + "\n" + startItem + output + endItem + "\n" + ("-" * repeatLength))
                }
            }
        }
    }

    // Spring boot create META-INF/build-info.properties to automatically add to the spring actutaor info
    springBoot {
        buildInfo()
    }
}

project("thule-cloud") {
    tasks.itest.dependsOn(":thule-admin-server:build", ":thule-config-service:build", ":thule-discovery-service:build", ":thule-people-service:build")

    bootRepackage.enabled = false

    dependencies {
        compile("org.apache.httpcomponents:httpclient")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.boot:spring-boot-starter-web")

        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
        testCompile("org.springframework.retry:spring-retry")
    }
}

project("thule-admin-server") {
    dependencies {
        compile("de.codecentric:spring-boot-admin-server")
        compile("de.codecentric:spring-boot-admin-server-ui")
        compile("org.jolokia:jolokia-core")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.cloud:spring-cloud-starter-config")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")

        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

project("thule-config-service") {
    dependencies {
        compile("org.jolokia:jolokia-core")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.cloud:spring-cloud-config-server")
        compile("org.springframework.cloud:spring-cloud-starter")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")

        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

project("thule-core") {
    bootRepackage.enabled = false

    dependencies {
        compile("commons-lang:commons-lang")
        compile("org.springframework.boot:spring-boot-starter-aop")

        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

project("thule-discovery-service") {
    dependencies {
        compile("org.jolokia:jolokia-core")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.cloud:spring-cloud-starter-eureka-server")

        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

project("thule-people-service") {
    jacocoTestReport {
        afterEvaluate {
            classDirectories = files(classDirectories.files.collect {
                // Excluded because Powermock bytecode manipulation affects Jacoco coverage results
                fileTree(it).exclude("**/Photograph.class")
            })
        }
    }

    dependencies {
        compile project(":thule-core")
        compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310") // Spring boot will add java8 java.util.time Jackson support when this dependency has been added
        compile("com.googlecode.log4jdbc:log4jdbc")
        compile("com.h2database:h2")
        compile("org.apache.httpcomponents:httpclient")
        compile("org.flywaydb:flyway-core")
        compile("org.hibernate:hibernate-java8")
        compile("org.jolokia:jolokia-core")
        compile("org.springframework.boot:spring-boot-starter-actuator")
        compile("org.springframework.boot:spring-boot-starter-aop")
        compile("org.springframework.boot:spring-boot-starter-data-jpa")
        compile("org.springframework.boot:spring-boot-starter-data-rest")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.boot:spring-boot-starter-security")
        compile("org.springframework.boot:spring-boot-starter-validation")
        compile("org.springframework.cloud:spring-cloud-starter-config")
        compile("org.springframework.cloud:spring-cloud-starter-eureka")
        compile("org.springframework.data:spring-data-rest-hal-browser")
        compile("org.springframework.retry:spring-retry") // Required to retry connecting to the discovery server when it is not available at startup

        testCompile("com.googlecode.log4jdbc:log4jdbc")
        testCompile("com.oracle:ojdbc6")
        testCompile("mysql:mysql-connector-java")
        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.hsqldb:hsqldb")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}

project("thule-repository-mongodb") {
    bootRepackage.enabled = false

    dependencies {
        compile project(":thule-core")
        compile("org.springframework.boot:spring-boot-starter-data-mongodb")
        compile("org.springframework.boot:spring-boot-starter-logging")
        compile("org.springframework.boot:spring-boot-starter-validation")

        testCompile("nl.jqno.equalsverifier:equalsverifier")
        testCompile("org.awaitility:awaitility")
        testCompile("org.powermock:powermock-api-mockito")
        testCompile("org.powermock:powermock-core")
        testCompile("org.powermock:powermock-module-junit4")
        testCompile("org.springframework.boot:spring-boot-starter-test")
    }
}
